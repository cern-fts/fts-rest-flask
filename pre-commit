#!/bin/bash
############################################################
# VARIABLES TO EDIT:
VENV_PATH="venv/bin/activate"
PYTHON_VERSION="py36"
TOOLS_TO_RUN="black pylint radon bandit"
# DO NOT TOUCH ANYTHING BELOW
############################################################

NC='\033[0m' # No Color

INFO () {
    BLUE='\033[0;34m'; 
    echo -e "${BLUE}$1${NC}";
}

OK () {
    GREEN='\033[0;32m' 
    echo -e "${GREEN}$1${NC}";
}

FAIL () {
    RED='\033[0;31m' 
    echo -e "${RED}$1${NC}";
}

WARN () {
    YELLOW='\033[0;33m' 
    echo -e "${YELLOW}$1${NC}";
}


# Get Added, Copied, Modified and Renamed files (why C and R though?)
FILES=$(git diff --cached --name-only --diff-filter=ACMR -- "*.py")
# If the length of FILES is zero, exit
[ -z "$FILES" ] && exit 0

if test -f "$VENV_PATH"
then
    source "$VENV_PATH"
else
    FAIL "$VENV_PATH not found"
    exit 1
fi

clean_exit () {
    deactivate
    exit $1
}

run_black () {
INFO "Running black     (formatting)"
at_least_one_formatted=false
for file in $FILES
do
    black_output=$(black --target-version $PYTHON_VERSION --safe $file 2>&1)
    exit_code=$?
    echo "$black_output" | grep -e reformatted > /dev/null
    formatted=$?
    if [ $exit_code -eq 0 ] && [ $formatted -eq 0 ]
    then 
        INFO "    formatted $file"
        at_least_one_formatted=true
    fi
    if [ $exit_code -eq 123 ]
    then 
        FAIL "black exited with an error"
        clean_exit 1
    fi
done

if [ "$at_least_one_formatted" = true ]
then
    git add --update
    #FILES=$(git diff --cached --name-only --diff-filter=ACMR "*.py") not necessary
fi
}

run_pylint () {
INFO "Running pylint    (checking syntax errors)"
for file in $FILES
do
    pylint_output="$(pylint --output-format colorized --disable C,R,W,E0402,E0602 --reports no --persistent no $file 2>&1)"
    # ignore E0402 because pylint doesn't know top-level package
    # ignore E0602 because pylint doesn't see imports
    exit_code=$?
    if [ $exit_code -ne 0 ]
    then 
        printf "$pylint_output\n"
        FAIL "pylint detected errors"
        clean_exit 1
    fi
done
}

run_bandit () {
INFO "Running bandit    (checking security issues)"
for file in $FILES
do
    bandit_output="$(bandit -ll $file 2>&1)"
    exit_code=$?
    if [ $exit_code -ne 0 ]
    then 
        printf "$bandit_output\n"
        FAIL "bandit detected security issues"
        clean_exit 1
    fi
done
}

run_radon () {
INFO "Running radon     (checking Cyclomatic Complexity)"
for file in $FILES
do
    radon_output="$(radon cc --min E --show-complexity $file)"
    if [ $exit_code -ne 0 ]
    then 
        FAIL "radon exited with an error"
        clean_exit 1
    fi
    if [[ "${radon_output// }" ]] # ignore whitespace (the last //)
    then
        echo -e "$radon_output"
        FAIL "radon detected files with a very high Cyclomatic Complexity"
        clean_exit 1
    fi
done
INFO "Running radon     (checking Maintainability Index)"
for file in $FILES
do
    radon_output="$(radon mi --min B $file)"
    if [ $exit_code -ne 0 ]
    then 
        FAIL "radon exited with an error"
        clean_exit 1
    fi
    if [[ "${radon_output// }" ]]
    then
        echo -e "$radon_output"
        FAIL "radon detected files with a very low Maintainability Index"
        clean_exit 1
    fi
done
}

run_autopep8 () {
INFO "Running autopep8  (formatting)"
formatted=false
for file in $FILES
do
    autopep_output="$(autopep8 --select E1,E2,E3,E401,W2,W3 --ignore E226,E24,E26 --exit-code --in-place $file)"
    exit_code=$?
    if [ $exit_code -eq 2 ]
    then 
        INFO "    formatted $file"
        formatted=true
    fi
    if [ $exit_code -eq 1 ]
    then 
        FAIL "autopep8 exited with an error"
        exit 1
    fi
done
}

# Actual algorithm
for tool in $TOOLS_TO_RUN
do
    if ! [ -x "$(command -v $tool)" ]; then
        FAIL "$tool is not installed"
        clean_exit 1
    fi
    run_func="run_${tool}"
    eval $run_func
done 
OK "Successfully passed all pre-commit checks"
clean_exit 0
