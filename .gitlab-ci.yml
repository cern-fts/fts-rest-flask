# The jobs run for every file in src/, even if they haven't been changed.
# Unfortunately Gitlab CI doesn't have any way to know the commit before the push.
# I used to do this to select only the files that had been changed:
# FILES=$(git diff --name-only --diff-filter=ACMR $CI_COMMIT_SHA~1 -- "*.py")
# if [ -z "$FILES" ]; then exit 0; fi
# The problem was that a push with multiple commits might pass the last commit even 
# if the previous failed.

image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci

stages:
  - static_code_analysis
  - tests
  - security
  - schedule

black:
  # Check that every file has been formatted with black
  stage: static_code_analysis
  script:
  - black --check --fast --target-version py36 src/

pylint:
  # Check that every file doesn't have syntax errors
  stage: static_code_analysis
  script:
  - pylint --output-format colorized --disable C,R,W src/ --init-hook='import sys; sys.path.append("src/fts3rest")' --ignored-modules=sqlalchemy

radon:
  # Check metrics for every file
  stage: static_code_analysis
  script:
  - source .gitlab-ci/radon.sh

functional_tests:
  stage: tests
  script:
  - mkdir /var/log/fts3rest
  - export PYTHONPATH=./src:./src/fts3rest
  - export FTS3TESTCONFIG=./src/fts3rest/fts3rest/tests/fts3testconfig
  - coverage run --branch --source src/fts3rest/fts3rest/ --omit 'src/fts3rest/fts3rest/tests/*' -m pytest src/
  - coverage report

bandit:
  # Find potential security issues in file. 
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: security
  script:
  - bandit -r src/

bandit_schedule:
  # Find potential security issues in file. 
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: schedule
  only:
    - schedules
  stage: static_code_analysis
  script:
  - bandit -r src/