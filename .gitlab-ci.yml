image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci

stages:
  - static_code_analysis
  - build
  - docker
  - tests
  - publish

variables:
  MYSQL_DATABASE: ftsflask
  MYSQL_ROOT_PASSWORD: ftsflaskroot

#---------------------------------
# Static Code Analysis
#---------------------------------

.pylint_template: &pylint_definition
  # Check for Python syntax errors
  stage: static_code_analysis
  script:
    - PY="PY${CI_JOB_NAME##pylint}"
    - VENV="VENV_${CI_JOB_NAME##pylint}"
    - source ~/.bashrc
    - pyenv global ${!PY}
    - source ${!VENV}/bin/activate
    - pylint --version
    - pylint --output-format colorized --disable C,R,W src/ --ignored-modules=sqlalchemy
  variables:
    PYTHONPATH: ./src:./src/fts3rest

black:
  # Check that every file has been formatted with black
  stage: static_code_analysis
  script:
    - black --version
    - black --check --fast --diff --target-version py39 src/

# Use the "fts/fts-rest-flask:ci-cc7-old" image, which is built on CC7 + Python3.6
# The latest "fts/fts-rest-flask:ci" image is based on Alma9 + Python3.9
pylint36:
  <<: *pylint_definition
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci-cc7-old

pylint37:
  <<: *pylint_definition
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci-cc7-old

pylint38:
  <<: *pylint_definition
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci-cc7-old

pylint39:
  <<: *pylint_definition

radon:
  # Check metrics for every file
  stage: static_code_analysis
  script:
    - radon --version
    - source .gitlab-ci/radon.sh

bandit:
  # Find potential security issues in file.
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: static_code_analysis
  script:
    - bandit --version
    - bandit --ini .gitlab-ci/bandit.ini

#--------------------------
# Build templates
#--------------------------

.server-build-template: &server-build-template_definition
  stage: build
  script:
    - ./packaging/fedora-packages.sh
    - ./packaging/server/fts-rest-server.sh
    - mkdir ${CI_JOB_NAME}
    - cp -rv build/server/RPMS build/server/SRPMS ${CI_JOB_NAME}
    - tree ${CI_JOB_NAME}
  variables:
    BRANCH: ${CI_COMMIT_REF_NAME}
  artifacts:
    when: on_success
    paths:
      - "$CI_JOB_NAME"

.client-build-template: &client-build-template_definition
  stage: build
  script:
    - ./packaging/fedora-packages.sh
    - ./packaging/client/fts-rest-client.sh
    - mkdir ${CI_JOB_NAME}
    - cp -r build/client/RPMS build/client/SRPMS ${CI_JOB_NAME}
    - tree ${CI_JOB_NAME}
  variables:
    BRANCH: ${CI_COMMIT_REF_NAME}
  artifacts:
    when: on_success
    paths:
      - "$CI_JOB_NAME"

#--------------------------
# Build jobs
#--------------------------

client_wheel_sdist:
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  stage: build
  script:
    - yum install -y python3 python3-wheel
    - python3 setup.py bdist_wheel
    - python3 setup.py sdist
  artifacts:
    when: on_success
    paths:
      - dist/

client_rpm_cc7:
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  <<: *client-build-template_definition

client_rpm_alma9:
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  <<: *client-build-template_definition

server_rpm_cc7:
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  <<: *server-build-template_definition

server_rpm_alma9:
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  <<: *server-build-template_definition

#--------------------------
# Docker build templates
#--------------------------

.kaniko_build: &kaniko_build-template
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -z "$CI_COMMIT_TAG" ]]; then CACHE="true"; else CACHE="false"; fi
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile .gitlab-ci/docker/${IMAGE} --context "${CI_PROJECT_DIR}" --cache=${CACHE} --destination ${DESTINATION} --build-arg dmcrepo=${DMC_REPO}
  retry: 1

#--------------------------
# Docker build jobs
#--------------------------

docker_build_cc7:
  <<: *kaniko_build-template
  variables:
    DMC_REPO: https://dmc-repo.web.cern.ch/dmc-repo/dmc-devel-el7.repo
    DESTINATION: gitlab-registry.cern.ch/fts/fts-rest-flask:cc7-ci
    IMAGE: Dockerfile-ci-cc7
  needs:
    - job: server_rpm_cc7
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"

docker_build_alma9:
  <<: *kaniko_build-template
  variables:
    DMC_REPO: https://dmc-repo.web.cern.ch/dmc-repo/dmc-devel-el9.repo
    DESTINATION: gitlab-registry.cern.ch/fts/fts-rest-flask:alma9-ci
    IMAGE: Dockerfile-ci-alma9
  needs:
    - job: server_rpm_alma9
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"

docker_tag_cc7:
  <<: *kaniko_build-template
  variables:
    DMC_REPO: https://dmc-repo.web.cern.ch/dmc-repo/dmc-rc-el7.repo
    DESTINATION: gitlab-registry.cern.ch/fts/fts-rest-flask:cc7-${CI_COMMIT_TAG}
    IMAGE: Dockerfile-ci-cc7
  needs:
    - job: server_rpm_cc7
  rules:
    - if: $CI_COMMIT_TAG != null

docker_tag_alma9:
  <<: *kaniko_build-template
  variables:
    DMC_REPO: https://dmc-repo.web.cern.ch/dmc-repo/dmc-rc-el9.repo
    DESTINATION: gitlab-registry.cern.ch/fts/fts-rest-flask:alma9-${CI_COMMIT_TAG}
    IMAGE: Dockerfile-ci-alma9
  needs:
    - job: server_rpm_alma9
  rules:
    - if: $CI_COMMIT_TAG != null

#--------------------------
# Testing templates
#--------------------------

.functional_tests_template: &functional_tests_definition
  stage: tests
  services:
    - name: mysql:8.0.32
      alias: mysqldb
      command: ["--default-authentication-plugin=mysql_native_password"]
  script:
    - sleep 20 # give some time for the mysql service to start
    - PY="PY${CI_JOB_NAME##*_tests}"
    - VENV="VENV_${CI_JOB_NAME##*_tests}"
    - source ~/.bashrc
    - pyenv global ${!PY}
    - python --version
    - source ${!VENV}/bin/activate
    - ./.gitlab-ci/setup-db.sh
    - sed -i "s/DbConnectString=localhost/DbConnectString=mysqldb/" $FTS3TESTCONFIG
    - coverage run --branch --source src/fts3rest/fts3rest/ --omit 'src/fts3rest/fts3rest/tests/*' -m pytest src/ -x
    - coverage report
  needs: []
  variables:
    PYTHONPATH: ./src:./src/fts3rest
    FTS3TESTCONFIG: ./src/fts3rest/fts3rest/tests/fts3testconfig

.rpm_tests_template: &rpm_tests_definition
  stage: tests
  services:
    - name: mysql:8.0.32
      alias: mysqldb
      command: ["--default-authentication-plugin=mysql_native_password"]
  script:
    - sleep 20 # give some time for the mysql service to start
    - yum install -y mariadb python3-pytest epel-release
    - yum install -y epel-rpm-macros
    - echo -e "[fts-depend]\nname=FTS Dependencies\nbaseurl=${FTS3REPO}\nenabled=1\ngpgcheck=0\npriority=3\n" > /etc/yum.repos.d/fts-depend.repo
    - PLATFORM=${CI_JOB_NAME%-*}
    - yum localinstall --nogpgcheck -y ${PLATFORM}/RPMS/*/*.rpm
    - ./.gitlab-ci/setup-db.sh
    - sed -i "s/DbConnectString=localhost/DbConnectString=mysqldb/" $FTS3TESTCONFIG
    - pytest-3 -x $FTS3TESTPATH

#--------------------------
# Testing jobs
#--------------------------

functional_tests36:
  <<: *functional_tests_definition
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci-cc7-old

functional_tests37:
  <<: *functional_tests_definition
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci-cc7-old

functional_tests38:
  <<: *functional_tests_definition
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci-cc7-old

functional_tests39:
  <<: *functional_tests_definition

server_rpm_cc7-test:
  <<: *rpm_tests_definition
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  dependencies:
    - server_rpm_cc7
  needs:
    - server_rpm_cc7
  variables:
    FTS3TESTCONFIG: /usr/lib/python3.6/site-packages/fts3rest/tests/fts3testconfig
    FTS3TESTPATH: /usr/lib/python3.6/site-packages/fts3rest/tests/functional/
    FTS3REPO: https://fts-repo.web.cern.ch/fts-repo/fts-depend/el7/x86_64/

server_rpm_alma9-test:
  <<: *rpm_tests_definition
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  dependencies:
    - server_rpm_alma9
  needs:
    - server_rpm_alma9
  variables:
    FTS3TESTCONFIG: /usr/lib/python3.9/site-packages/fts3rest/tests/fts3testconfig
    FTS3TESTPATH: /usr/lib/python3.9/site-packages/fts3rest/tests/functional/
    FTS3REPO: https://fts-repo.web.cern.ch/fts-repo/fts-depend/el9/x86_64/

#--------------------------
# Publish templates
#--------------------------

.publish-template: &publish-template_definition
  stage: publish
  image: gitlab-registry.cern.ch/eos/gitlab-eos/alma9:latest
  dependencies:
    - client_rpm_cc7
    - server_rpm_cc7
    - client_rpm_alma9
    - server_rpm_alma9
  script:
    - automount
    - cat "$repo_passwd" | kinit "$repo_user"
    - |
      for package in server_rpm_cc7 client_rpm_cc7 server_rpm_alma9 client_rpm_alma9; do
        packaging/fts-repo-manager.py --action add --base /eos/workspace/f/fts/repo/www/repos/ --arch-dir x86_64 --ref ${CI_COMMIT_REF_NAME} --packages ${package}/RPMS/*/*.rpm ${package}/SRPMS/*
      done
  tags:
    - docker-privileged-xl
  retry: 2

#--------------------------
# Publish jobs
#--------------------------

rpms:
  <<: *publish-template_definition
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "fts"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_TAG != null'
    - if: '$CI_COMMIT_REF_NAME == "FTS-1925_token_project" || $CI_COMMIT_TAG != null'
    - if: '$CI_COMMIT_REF_NAME != "develop" && $CI_COMMIT_TAG == null'
      when: manual

pypi-publish:
  needs:
    - job: client_wheel_sdist
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install -y git python3-pip
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools twine
    - twine check dist/*
    - python3 -m twine upload --repository-url ${PYPI_REPOSITORY} dist/* --verbose
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: manual
    - when: never
