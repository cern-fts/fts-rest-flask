image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci

stages:
  - static_code_analysis
  - build
  - docker
  - tests
  - publish

variables:
  MYSQL_DATABASE: ftsflask
  MYSQL_ROOT_PASSWORD: ftsflaskroot

#---------------------------------
# Static Code Analysis
#---------------------------------

.pylint_template: &pylint_definition
  # Check for Python syntax errors
  stage: static_code_analysis
  script:
    - PY="PY${CI_JOB_NAME##pylint}"
    - VENV="VENV_${CI_JOB_NAME##pylint}"
    - source ~/.bashrc
    - pyenv global ${!PY}
    - source ${!VENV}/bin/activate
    - pylint --version
    - pylint --output-format colorized --disable C,R,W src/ --ignored-modules=sqlalchemy
  variables:
    PYTHONPATH: ./src:./src/fts3rest

black:
  # Check that every file has been formatted with black
  stage: static_code_analysis
  script:
    - black --version
    - black --check --fast --diff --target-version py36 src/

pylint36:
  <<: *pylint_definition

pylint37:
  <<: *pylint_definition

pylint38:
  <<: *pylint_definition

radon:
  # Check metrics for every file
  stage: static_code_analysis
  script:
    - radon --version
    - source .gitlab-ci/radon.sh

bandit:
  # Find potential security issues in file.
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: static_code_analysis
  script:
    - bandit --version
    - bandit --ini .gitlab-ci/bandit.ini

#--------------------------
# Build jobs
#--------------------------

client_wheel_sdist:
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  stage: build
  script:
    - yum install -y python3 python3-wheel
    - python3 setup.py bdist_wheel
    - python3 setup.py sdist
  artifacts:
    when: on_success
    paths:
      - dist/

client_rpm:
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  stage: build
  script:
    - yum install -y git rpm-build tree
    - ./packaging/client/fts-rest-client.sh
    - mkdir artifacts/
    - cp -r build/client/RPMS build/client/SRPMS artifacts/
    - tree artifacts/
  variables:
    BRANCH: ${CI_COMMIT_REF_NAME}
  artifacts:
    when: on_success
    paths:
      - artifacts/

server_rpm:
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  stage: build
  script:
    - yum install -y git rpm-build tree
    - ./packaging/server/fts-rest-server.sh
    - mkdir artifacts/
    - cp -r build/server/RPMS build/server/SRPMS artifacts/
    - tree artifacts/
  variables:
    BRANCH: ${CI_COMMIT_REF_NAME}
  artifacts:
    when: on_success
    paths:
      - artifacts/

#--------------------------
# Docker build templates
#--------------------------

.kaniko_build: &kaniko_build-template
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -z "$CI_COMMIT_TAG" ]];
      then CACHE="true"; REGISTRY="latest";
      else CACHE="false"; REGISTRY="${CI_COMMIT_TAG}";
      fi
    - if [[ -z "$DMC_REPO" ]];
      then DMC_REPO="https://dmc-repo.web.cern.ch/dmc-repo/dmc-devel-el7.repo";
      fi
    - DESTINATION="gitlab-registry.cern.ch/fts/fts-rest-flask:${REGISTRY}"
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile .gitlab-ci/docker/Dockerfile-ci --context "${CI_PROJECT_DIR}" --cache=${CACHE} --destination ${DESTINATION} --build-arg dmcrepo=${DMC_REPO}
  retry: 1

#--------------------------
# Docker build jobs
#--------------------------

docker_build:
  <<: *kaniko_build-template
  needs:
    - job: server_rpm
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"

docker_tag:
  <<: *kaniko_build-template
  variables:
    DMC_REPO: https://dmc-repo.web.cern.ch/dmc-repo/dmc-rc-el7.repo
  needs:
    - job: server_rpm
  rules:
    - if: $CI_COMMIT_TAG != null

#--------------------------
# Testing jobs
#--------------------------

.functional_tests_template: &functional_tests_definition
  stage: tests
  services:
    - name: centos/mariadb:latest
      alias: mariadb
  script:
    - PY="PY${CI_JOB_NAME##*_tests}"
    - VENV="VENV_${CI_JOB_NAME##*_tests}"
    - source ~/.bashrc
    - pyenv global ${!PY}
    - python --version
    - source ${!VENV}/bin/activate
    - ./.gitlab-ci/setup-db.sh
    - sed -i "s/DbConnectString=localhost/DbConnectString=mariadb/" $FTS3TESTCONFIG
    - coverage run --branch --source src/fts3rest/fts3rest/ --omit 'src/fts3rest/fts3rest/tests/*' -m pytest src/ -x
    - coverage report
  needs: []
  variables:
    PYTHONPATH: ./src:./src/fts3rest
    FTS3TESTCONFIG: ./src/fts3rest/fts3rest/tests/fts3testconfig

functional_tests36:
  <<: *functional_tests_definition

functional_tests37:
  <<: *functional_tests_definition

functional_tests38:
  <<: *functional_tests_definition

rpm_tests:
  stage: tests
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  services:
    - name: centos/mariadb:latest
      alias: mariadb
  script:
    - yum install -y yum-plugin-priorities mariadb python36-pytest
    - echo -e "[fts-depend]\nname=FTS Dependencies\nbaseurl=https://fts-repo.web.cern.ch/fts-repo/fts-depend/el7/x86_64/\nenabled=1\ngpgcheck=0\npriority=3\n" > /etc/yum.repos.d/fts-depend.repo
    - yum localinstall --nogpgcheck -y artifacts/RPMS/*/*.rpm
    - ./.gitlab-ci/setup-db.sh
    - sed -i "s/DbConnectString=localhost/DbConnectString=mariadb/" $FTS3TESTCONFIG
    - pytest-3 -x /usr/lib/python3.6/site-packages/fts3rest/tests/functional/
  dependencies:
    - server_rpm
  needs:
    - server_rpm
  variables:
    FTS3TESTCONFIG: /usr/lib/python3.6/site-packages/fts3rest/tests/fts3testconfig

#--------------------------
# Publish templates
#--------------------------

.publish-template: &publish-template_definition
  stage: publish
  image: gitlab-registry.cern.ch/eos/gitlab-eos/cc7:latest
  dependencies:
    - client_rpm
    - server_rpm
  script:
    - yum install -y python sssd-client sudo createrepo
    - automount
    - cat "$repo_passwd" | kinit "$repo_user"
    - eosfusebind
    - packaging/fts-repo-manager.py --action add --base /eos/workspace/f/fts/repo/www/repos/ --arch-dir x86_64 --ref ${CI_COMMIT_REF_NAME} --packages artifacts/RPMS/*/*.rpm artifacts/SRPMS/*
    - sleep 60
  tags:
    - docker-privileged
  retry: 2

#--------------------------
# Publish jobs
#--------------------------

rpms:
  <<: *publish-template_definition
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "fts"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_TAG != null'
    - if: '$CI_COMMIT_REF_NAME != "develop" && $CI_COMMIT_TAG == null'
      when: manual
