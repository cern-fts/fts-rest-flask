# The jobs run for every file in src/, even if they haven't been changed.
# Unfortunately Gitlab CI doesn't have any way to know the commit before the push.
# I used to do this to select only the files that had been changed:
# FILES=$(git diff --name-only --diff-filter=ACMR $CI_COMMIT_SHA~1 -- "*.py")
# if [ -z "$FILES" ]; then exit 0; fi
# The problem was that a push with multiple commits might pass the last commit even 
# if the previous failed.
image: docker.io/library/centos:7

stages:
  - format
  - static_code_analysis
  - schedule

black:
  # Check that every file has been formatted with black
  stage: format
  script:
  - yum install git -y
  - yum install python3-pip -y
  - pip3 install black
  - black --check --fast --target-version py36 src/

pylint:
  # Check that every file doesn't have syntax errors
  stage: static_code_analysis
  script:
  - yum install git -y
  - yum install python3-pip -y
  - pip3 install pylint
  - pylint --output-format colorized --disable C,R,W src/

radon:
  # Check metrics for every file
  stage: static_code_analysis
  script:
  - yum install git -y
  - yum install python3-pip -y
  - pip3 install radon
  - source .gitlab-ci/radon.sh

bandit:
  # Find potential security issues in file. 
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: static_code_analysis
  script:
  - yum install git -y
  - yum install python3-pip -y
  - pip3 install bandit
  - bandit -r src/

bandit_schedule:
  # Find potential security issues in file. 
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: schedule
  only:
    - schedules
  stage: static_code_analysis
  script:
  - yum install git -y
  - yum install python3-pip -y
  - pip3 install bandit
  - bandit -r src/