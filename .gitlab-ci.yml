image: gitlab-registry.cern.ch/fts/fts-rest-flask:ci

stages:
  - static_code_analysis
  - tests
  - security
  - build
  - deploy

variables:
  MYSQL_DATABASE: ftsflask
  MYSQL_ROOT_PASSWORD: asdf
  PYTHONPATH: ./src:./src/fts3rest
  FTS3TESTCONFIG: ./src/fts3rest/fts3rest/tests/fts3testconfig_ci

black:
  # Check that every file has been formatted with black
  stage: static_code_analysis
  script:
  - black --check --fast --target-version py36 src/

pylint36:
  # Check that every file doesn't have syntax errors
  stage: static_code_analysis
  script:
  - python --version
  - pylint --output-format colorized --disable C,R,W src/ --ignored-modules=sqlalchemy

pylint37:
  stage: static_code_analysis
  script:
  - source ~/.bashrc
  - pyenv global $PY37
  - source $VENV_37/bin/activate
  - python --version
  - pylint --output-format colorized --disable C,R,W src/ --ignored-modules=sqlalchemy

pylint38:
  stage: static_code_analysis
  script:
  - source ~/.bashrc
  - pyenv global $PY38
  - source $VENV_38/bin/activate
  - python --version
  - pylint --output-format colorized --disable C,R,W src/ --ignored-modules=sqlalchemy

radon:
  # Check metrics for every file
  stage: static_code_analysis
  script:
  - source .gitlab-ci/radon.sh

functional_tests36:
  image: gitlab-registry.cern.ch/fts/fts-rest-flask:rpm
  stage: tests
  services:
    - name: centos/mariadb:latest
      alias: mariadb
  script:
  - python3 --version
  - source .gitlab-ci/db.sh
  - pytest-3 src/ -x

functional_tests37:
  stage: tests
  services:
    - name: centos/mariadb:latest
      alias: mariadb
  script:
  - source ~/.bashrc
  - pyenv global $PY37
  - python --version
  - source $VENV_37/bin/activate
  - source .gitlab-ci/db.sh
  - coverage run --branch --source src/fts3rest/fts3rest/ --omit 'src/fts3rest/fts3rest/tests/*' -m pytest src/ -x
  - coverage report

functional_tests38:
  stage: tests
  services:
    - name: centos/mariadb:latest
      alias: mariadb
  script:
  - source ~/.bashrc
  - pyenv global $PY38
  - python --version
  - source $VENV_38/bin/activate
  - source .gitlab-ci/db.sh
  - coverage run --branch --source src/fts3rest/fts3rest/ --omit 'src/fts3rest/fts3rest/tests/*' -m pytest src/ -x
  - coverage report

bandit:
  # Find potential security issues in file.
  # It's allowed to fail as it may detect false positives.
  allow_failure: true
  stage: security
  script:
  - bandit -r src/ --exclude src/fts3rest/fts3rest/tests/
  needs: []

client_wheel_sdist:
  stage: build
  script:
  - python3 setup.py bdist_wheel
  - python3 setup.py sdist
  artifacts:
    when: on_success
    untracked: true


client_rpm:
  stage: build
  script:
    - rpmdev-setuptree
    - cd packaging ; ./fts-rest-client.sh ; cd ~/rpmbuild/SPECS
    - RELEASE=$(printf "%sgit%s" $(date +%y%m%d%H%M) ${CI_COMMIT_SHORT_SHA})
    - rpmbuild -bs --define "_release ${RELEASE}" fts-rest-client.spec
    - rpmbuild -bb --define "_release ${RELEASE}" fts-rest-client.spec
    - mkdir /builds/fts/fts-rest-flask/artifacts
    - mv ~/rpmbuild/RPMS/noarch/* /builds/fts/fts-rest-flask/artifacts
  artifacts:
    when: on_success
    untracked: true


server_rpm:
  stage: build
  script:
    - rpmdev-setuptree
    - cd packaging ; ./fts-rest-server.sh ; cd ~/rpmbuild/SPECS
    - RELEASE=$(printf "%sgit%s" $(date +%y%m%d%H%M) ${CI_COMMIT_SHORT_SHA})
    - rpmbuild -bs --define "_release ${RELEASE}" fts-rest-server.spec
    - rpmbuild -bb --define "_release ${RELEASE}" fts-rest-server.spec
    - mkdir /builds/fts/fts-rest-flask/artifacts
    - mv ~/rpmbuild/RPMS/noarch/* /builds/fts/fts-rest-flask/artifacts
  artifacts:
    when: on_success
    untracked: true


deploy_rpm:
  stage: deploy
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  variables:
    FTS_REPO: "/eos/workspace/f/fts/repo/www/repos/testing/el7/x86_64/"
    SSH_OPTIONS: -o StrictHostKeyChecking=no -o GSSAPIAuthentication=yes -o GSSAPITrustDNS=yes -o GSSAPIDelegateCredentials=yes
  script:
    - yum install -y openssh-clients
    - kinit gdrepo <<<$GDREPO_PASSWORD
    - ls -la
    - scp ${SSH_OPTIONS} artifacts/*.rpm gdrepo@lxplus.cern.ch:$FTS_REPO
    - ssh ${SSH_OPTIONS} gdrepo@lxplus "createrepo --update ${FTS_REPO}"
  dependencies:
    - client_rpm
    - server_rpm


